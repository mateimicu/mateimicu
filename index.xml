<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>mateimicu</title><link>http://mateimicu.com/</link><description>Recent content on mateimicu</description><generator>Hugo - gohugo.io</generator><language>en</language><contact>contact@mateimicu.com</contact><copyright/><atom:link href="http://mateimicu.com/index.xml" rel="self" type="application/rss+xml"/><item><title>K8s on Hetzner Cloud</title><link>http://mateimicu.com/k8s-on-hetzner/</link><pubDate>Sun, 12 Jul 2020 17:42:29 +0300</pubDate><author>Matei-Marius Micu</author><guid>http://mateimicu.com/k8s-on-hetzner/</guid><description/><content>&lt;p>I was looking at having a long-running k8s cluster for testing and pet projects, &lt;a href="https://www.hetzner.com/cloud">Hetzner Cloud&lt;/a> looks like a good initiative.&lt;/p>
&lt;h3 id="goal">Goal&lt;/h3>
&lt;p>Have a running k8s cluster that fits the following criteria:&lt;/p>
&lt;ul>
&lt;li>Secure - the cluster will be exposed to the internet&lt;/li>
&lt;li>Scalable - I&amp;rsquo;m not sure what I will run on it, probably a lot of side projects and data mining projects, so I would like to scale it from time to time. At the same time scalability (elasticity) helps ensure the cluster is not fragile&lt;/li>
&lt;li>Replicable - I want to spin a new cluster, destroy this one and recreate it at will. Replicability is partially related to scalability/elasticity but also about bootstrapping the cluster&lt;/li>
&lt;/ul>
&lt;p>Also, a few restrictions (side quests) needed for this:&lt;/p>
&lt;ul>
&lt;li>learn more about security and k8s internals&lt;/li>
&lt;li>don&amp;rsquo;t spend a lot of money&lt;/li>
&lt;li>going for a managed solutions is cheating (for now)&lt;/li>
&lt;/ul>
&lt;h3 id="why-hetzner-cloudhetzner-cloud">Why &lt;a href="https://www.hetzner.com/cloud">Hetzner Cloud&lt;/a>&lt;/h3>
&lt;p>I already have experience with &lt;a href="eks">EKS&lt;/a> and &lt;a href="do-k8s">K8s on DigitalOcean&lt;/a>, but they can get a bit expensive (especially if you start using other services).&lt;/p>
&lt;p>There is a good post &lt;a href="https://devonblog.com/containers/affordable-kubernetes-cluster/">Affordable Kubernetes Cluster by Remko Seelig&lt;/a> about using &lt;a href="https://cloud.google.com/kubernetes-engine">GKE&lt;/a> with &lt;a href="https://cloud.google.com/kubernetes-engine/docs/how-to/preemptible-vms">preemptible nodes&lt;/a>, but the cluster does not have a lot of computing power.&lt;/p>
&lt;p>I already looked at &lt;a href="https://github.com/kelseyhightower/kubernetes-the-hard-way">Kubernetes The Hard Way&lt;/a> and remembered that &lt;a href="https://www.hetzner.com/cloud">Hetzner Cloud&lt;/a> offers pretty cheap compute instances (starts at 2,89 €).
Working with &lt;a href="https://www.hetzner.com/cloud">Hetzner Cloud&lt;/a> means that I have to run control plane myself, this may cut in my processing power but has the advantage that I should get a more in-depth look at how it works.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Cloud Provider&lt;/th>
&lt;th>Control Plane cost&lt;/th>
&lt;th>worker nodes (8vCPU 16GB ram)&lt;/th>
&lt;th>worker nodes count&lt;/th>
&lt;th>Min Cost&lt;/th>
&lt;th>Max Cost&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Google (gke)&lt;/td>
&lt;td>0 (for single-zone or multi-zonal) $0.10 per hour (± 73$ per month) for regional cluster&lt;/td>
&lt;td>31.86$* -&amp;gt; 105$ ~ 9 * g1-small * preemptible price&lt;/td>
&lt;td>9&lt;/td>
&lt;td>32$&lt;/td>
&lt;td>105$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>AWS (EKS)&lt;/td>
&lt;td>$0.10 per hour (± 73$ per month)&lt;/td>
&lt;td>28$* -&amp;gt; 146$ ~ 4 * a1.large in Ohio * spot insance price&lt;/td>
&lt;td>4&lt;/td>
&lt;td>91$&lt;/td>
&lt;td>219$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Azure (AKS)&lt;/td>
&lt;td>0&lt;/td>
&lt;td>$26* -&amp;gt; $265.72 ~ 4 * A2 v2 in East US2 * for maximum spot instance discount&lt;/td>
&lt;td>4&lt;/td>
&lt;td>26$&lt;/td>
&lt;td>265$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Linode&lt;/td>
&lt;td>0&lt;/td>
&lt;td>$80 ~ 4 * (2vCPU 4GB ram)&lt;/td>
&lt;td>4&lt;/td>
&lt;td>80$&lt;/td>
&lt;td>80$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Digital Ocean&lt;/td>
&lt;td>0&lt;/td>
&lt;td>$80 ~ 4 * (2vCPU 4GB ram)&lt;/td>
&lt;td>4&lt;/td>
&lt;td>80$&lt;/td>
&lt;td>80$&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Hetzner Cloud&lt;/td>
&lt;td>5.7€ (assuming CX21 have enough resources)&lt;/td>
&lt;td>± 22 € (4 CX21)&lt;/td>
&lt;td>4&lt;/td>
&lt;td>27.7€ (around 32$)&lt;/td>
&lt;td>27.7€ (around 32$)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>There are a few caveats with each solution:&lt;/p>
&lt;ul>
&lt;li>preemptible/spot instances can be shut down; we can run part of the instances as normal ones and have smart auto-scaling to provision more if needed&lt;/li>
&lt;li>spot instance costs can vary for AWS and Azure (preemptible instances have a fixed price on Google)&lt;/li>
&lt;li>with cloud providers (Google, AWS, Azure, DigitalOcean, Linode) other costs can occur (you can avoid them if you really want):
&lt;ul>
&lt;li>extra storage costs (PV&amp;rsquo;s for example)&lt;/li>
&lt;li>data transfer/networking costs&lt;/li>
&lt;li>backup costs&lt;/li>
&lt;li>logging costs (for example shipping logs to CloudWatch)&lt;/li>
&lt;li>load balancer costs&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://cloud.google.com/kubernetes-engine">GKE&lt;/a> with g1-small may not be worth it as the instance is pretty underpowered&lt;/li>
&lt;li>Running the control plane can be tricky (this is why most of the cloud providers offer managed control plane)&lt;/li>
&lt;/ul>
&lt;p>One big advantage of running the control plane and doing everything from scratch is the learning process (one of the side quests for this pet project).
&lt;a href="https://www.hetzner.com/cloud">Hetzner Cloud&lt;/a> has a simple offering, I hope to get support (at least beta) for multiple things:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kubernetes/autoscaler/issues/2054">cluster auto scaler&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/kubernetes-sigs/cluster-api">cluster api&lt;/a> (looks like somebody is starting a business around this &lt;a href="https://www.upwork.com/jobs/Make-Kubernetes-cluster-production-ready-Hetzner-cloud-using-the-Cluster-API_~01c7e42d8122ac97ad">upwork job&lt;/a> and &lt;a href="https://github.com/cluster-api-provider-hcloud/cluster-api-provider-hcloud/">github cluster api for hcloud&lt;/a>)&lt;/li>
&lt;/ul>
&lt;h3 id="existing-resources-and-approaches">Existing resources and approaches&lt;/h3>
&lt;p>Looking online there is already some work done in this direction&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/cluster-api-provider-hcloud/cluster-api-provider-hcloud/">github cluster api for hcloud&lt;/a> looks like the exact thing I want&lt;/li>
&lt;li>&lt;a href="https://github.com/hobby-kube/guide">hoby-kube&lt;/a> seems to have a complete guide&lt;/li>
&lt;li>There is also some documentation from &lt;a href="https://www.hetzner.com/cloud">Hetzner Cloud&lt;/a>:
&lt;ul>
&lt;li>&lt;a href="https://community.hetzner.com/tutorials/install-kubernetes-cluster">Install a Kubernetes cluster on cloud servers&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://community.hetzner.com/tutorials/create-microk8s-cluster">Create a Microk8s Cluster&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://www.tmjohnson.co.uk/posts/k8s/">Create a complete cheapo Kubernetes cluster&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://medium.com/@jmrobles/how-to-create-a-kubernetes-cluster-with-rancher-on-hetzner-3b2f7f0c037a">How to create a Kubernetes cluster with Rancher on Hetzner&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/xetys/hetzner-kube">hetzner-kube&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://metawave.ch/posts/kubernetes-hetzner-setup/">Kubernetes on Hetzner Cloud: Setup a Kubernetes Cluster&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>There are also multiple installers for k8s; we can even consider &lt;a href="https://k3s.io/">k3s&lt;/a> or &lt;a href="%5Bhttps://microk8s.io/%5D">microk8s&lt;/a>&lt;/p>
&lt;h3 id="next-steps">Next Steps&lt;/h3>
&lt;p>I&amp;rsquo;ll probably look more at &lt;a href="https://github.com/kubernetes-sigs/cluster-api">cluster api&lt;/a> and try to figure out how it works&lt;/p></content></item><item><title>Masters Degree First Year Update.</title><link>http://mateimicu.com/masters-degree-02/</link><pubDate>Sat, 10 Nov 2018 20:03:53 +0200</pubDate><author>Matei-Marius Micu</author><guid>http://mateimicu.com/masters-degree-02/</guid><description/><content>&lt;p>Update for the first year, it wasn&amp;rsquo;t quite weekly like mentioned in the last post ;).
Because some time passed I&amp;rsquo;ll only give a short summary.&lt;/p>
&lt;p>Coursers for the first semester:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://profs.info.uaic.ro/~busaco/teach/courses/wade/">Web Application Development&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://sites.google.com/view/rbenchea/advanced-chapters-of-neural-networks">Advance Chapters of Neural Networks&lt;/a> (I also followed &lt;a href="https://sites.google.com/view/rbenchea/neural-networks">Neural Networks&lt;/a> the undergraduate course)&lt;/li>
&lt;li>&lt;a href="https://profs.info.uaic.ro/~vidrascu/MasterSOD/index.html">Distributed Operating Systems&lt;/a> (the website might be password protected but I have the [course description][sod-cd])&lt;/li>
&lt;li>&lt;a href="https://profs.info.uaic.ro/~adiftene/Scoala/2019/ASET/index.html">Advanced Software Engineering Techniques&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Courses for the second semester:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://profs.info.uaic.ro/~eonica/ebs/">Event-based systems&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://profs.info.uaic.ro/~webdata/planuri/master/MSD2FS01-ro.pdf">Specification and verification of distributed systems&lt;/a>&lt;/li>
&lt;li>[Pragmatical aspects related to cloud computing][https://www.qwiklabs.com/]&lt;/li>
&lt;li>&lt;a href="https://profs.info.uaic.ro/~adria/teach/courses/pcd/">Distributed and parallel programming &lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="web-application-development">Web Application Development&lt;/h2>
&lt;p>On this course, we progressed to &lt;a href="https://www.w3.org/2001/sw/wiki/RDF">RDF&lt;/a> and got an introduction to &lt;a href="https://en.wikipedia.org/wiki/SPARQL">SPARQL&lt;/a>. During the laboratories and courses, we also explored different ways to use/create and manipulate Semantic Data.&lt;/p>
&lt;p>Here my team&amp;rsquo;s final project took all the projects from &lt;a href="https://landscape.cncf.io/">Cloud Native Computing Foundation Landscape&lt;/a> ) mapped it into an Ontology about distributed and CloudNative software projects and in combinations with &lt;a href="schema.org">schema.org&lt;/a> we could have some smart queries in order to help a developer choose the best type of technology based on license, GitHub metrics, technologies used, etc &amp;hellip; .&lt;/p>
&lt;h2 id="advance-chapters-of-neural-networks">Advance Chapters of Neural Networks&lt;/h2>
&lt;p>Implemented successfully the &lt;a href="http://yann.lecun.com/exdb/mnist/">MNIST dataset&lt;/a> homework.&lt;/p>
&lt;p>For the final project, we classified &lt;a href="https://www.cs.toronto.edu/~kriz/cifar.html">CIFRA10&lt;/a> dataset and we were graded based on our accuracy. The model was a convolutional neural network.&lt;/p>
&lt;h2 id="distributed-operating-systems">Distributed Operating Systems&lt;/h2>
&lt;p>The python wrapper for the last homework used numpy and pandas to plot graphs of the results.&lt;/p>
&lt;p>For the second and third homework, we had to implement various operations for images (very similar to matrics operations), break the processing in multiple chings and schedule them on workers run with [OpenMP][openmp].&lt;/p>
&lt;p>For the research part, I had a presentation about &lt;a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.159.4643&amp;amp;rep=rep1&amp;amp;type=pdf">Lamport, L. (2006). Fast paxos. Distributed Computing, 19(2), 79-103.&lt;/a>&lt;/p>
&lt;h2 id="advanced-software-engineering-techniques">Advanced Software Engineering Techniques&lt;/h2>
&lt;p>Our solution examines the running pattern of various functions running in &lt;a href="https://kubeless.io/">Kubeless&lt;/a> and predicts the load allowing us the possibility to scale up/down when needed.&lt;/p>
&lt;h1 id="second-semester">Second Semester&lt;/h1>
&lt;h2 id="event-based-systems">Event-based systems&lt;/h2>
&lt;p>Here the focus on all the types of event-based systems, we analyzed topic-based systems, content-based systems, how they are implemented and the pros and cons to all of them.
We also analyzed various researched papers.
Four the final project we have created a broker overlay over &lt;a href="https://github.com/nats-io/nats-streaming-server">NATS&lt;/a> that is a topic-based streaming platform) that implement content-based filtering: you specify the property of the content that you are interested in and the brokers will stream to you all the messages that match. The project is extremely experimental but is available &lt;a href="https://github.com/mateimicu/nats-overlay-broker">here&lt;/a>&lt;/p>
&lt;p>My team also took a closer look at &lt;a href="https://arxiv.org/pdf/1709.01363.pdf">de Assuncao, M. D., da Silva Veith, A., &amp;amp; Buyya, R. (2018). Distributed data stream processing and edge computing: A survey on resource elasticity and future directions. Journal of Network and Computer Applications, 103, 1-17.&lt;/a>&lt;/p>
&lt;h2 id="specification-and-verification-of-distributed-systems">Specification and verification of distributed systems&lt;/h2>
&lt;p>This course was mostly based on theory and exercises and we looked at various semantics and mathematical(logics) models that can help us specify and check various properties of distributed systems.&lt;/p>
&lt;p>For the practica side (except exercises) we looked at &lt;a href="http://cpntools.org/">CPN Tools
&lt;/a>&lt;/p>
&lt;h2 id="distributed-and-parallel-programming">Distributed and parallel programming&lt;/h2>
&lt;p>Here an overview of cloud paradigms and offerings was presented from a research perspective.&lt;/p>
&lt;p>Our projects revolved around architecting distributed applications based on various other technologies (blockchain for example) that can implement highly sensitive tasks, we looked at how we can ensure using blockchain the fair use of data streams provided by IoT devices.&lt;/p>
&lt;h2 id="pragmatical-aspects-related-to-cloud-computing">Pragmatical aspects related to cloud computing&lt;/h2>
&lt;p>This course was actually about &lt;a href="https://aws.amazon.com/">AWS&lt;/a> and it was presented by engineers working on the tools using &lt;a href="https://www.qwiklabs.com/">qwiklabs&lt;/a>. It presented various architectures used for creating cloud-native applications and how we can leverage tools from &lt;a href="https://aws.amazon.com/">AWS&lt;/a>.&lt;/p>
&lt;h1 id="research">Research&lt;/h1>
&lt;p>In this category I&amp;rsquo;ll put the progress on the research side, articles I read/plan to read and what I&amp;rsquo;m trying to understand at the moment.&lt;/p>
&lt;h6 id="done-readingviewing">Done Reading/Viewing&lt;/h6>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=yE3eMxYJDiE">Building consistent transactions with inconsistent replication&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://drive.google.com/file/d/1oLOS6U1GiXFUJQ_w7HssO_YVVrH204sT/view">A Brief History of Information-Centric Network&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=wPxn7lBSUnQ">Nakadi SQL engine&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://mirroronet.pl/pub/mirrors/video.fosdem.org/2018/H.2215%20(Ferrer)/nakadi.webm">Nakadi event broker&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mirror.as35701.net/video.fosdem.org/2019/UA2.118/nakadi.mp4">Streaming Events for 100s of teams&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.somethingsimilar.com/2013/01/14/notes-on-distributed-systems-for-young-bloods/">Notes on Distributed Systems for Young Bloods&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.the-paper-trail.org/post/2014-08-09-distributed-systems-theory-for-the-distributed-systems-engineer/">Distributed systems theory for the distributed systems engineer
&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://doras.dcu.ie/20641/1/FICloud15-EdgeCloudContainer.pdf">Pahl, C., &amp;amp; Lee, B. (2015, August). Containers and clusters for edge cloud architectures&amp;ndash;a technology review. In 2015 3rd international conference on future internet of things and cloud (pp. 379-386). IEEE.
&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://biblio.ugent.be/publication/7144309/file/7144339">Sonkoly, B., Czentye, J., Szabo, R., Jocha, D., Elek, J., Sahhaf, S., &amp;hellip; &amp;amp; Risso, F. (2015). Multi-domain service orchestration over networks and clouds: a unified approach. ACM SIGCOMM Computer Communication Review, 45(4), 377-378.
&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=EGRmmxVFOfE">Practical Distributed Consensus using HashiCorp/raft&lt;/a>&lt;/li>
&lt;/ul>
&lt;h6 id="future-work">Future Work&lt;/h6>
&lt;ul>
&lt;li>&lt;a href="https://ecommons.cornell.edu/bitstream/handle/1813/6567/86-727.pdf?sequence=1">Alpern, B., &amp;amp; Schneider, F. B. (1987). Recognizing safety and liveness. Distributed computing, 2(3), 117-126.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://link.springer.com/content/pdf/10.1007/s13174-011-0027-x.pdf">Höfer, C. N., &amp;amp; Karagiannis, G. (2011). Cloud computing services: taxonomy and comparison. Journal of Internet Services and Applications, 2(2), 81-94.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.researchgate.net/profile/Robbert_Van_Renesse/publication/221029788_Replication_Techniques_for_Availability/links/0c96052b26a4fc846a000000.pdf">Van Renesse, Robbert &amp;amp; Guerraoui, Rachid. (2010). Replication Techniques for Availability. 5959. 19-40. 10.1007/978-3-642-11294-2_2. &lt;/a>&lt;/li>
&lt;li>&lt;a href="http://lamport.azurewebsites.net/pubs/lamport-paxos.pdf">ACM Transactions on Computer Systems 16, 2 (May 1998), 133-169. Also appeared as SRC Research Report 49. &lt;/a>&lt;/li>
&lt;li>&lt;a href="http://jtfmumm.com/blog/2015/11/17/crdt-primer-1-defanging-order-theory/">A CRDT Primer Part I: Defanging Order Theory
&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://delivery.acm.org/10.1145/1730000/1721672/p50-armbrust.pdf?ip=89.136.123.38&amp;amp;id=1721672&amp;amp;acc=OPEN&amp;amp;key=4D4702B0C3E38B35%2E4D4702B0C3E38B35%2E4D4702B0C3E38B35%2E6D218144511F3437&amp;amp;__acm__=1568230945_600b4bf2d68ca1aa70ae9e72f6291ded">Armbrust, Michael &amp;amp; Fox, Armando &amp;amp; Griffith, Rean &amp;amp; Joseph, Anthony &amp;amp; Katz, Randy &amp;amp; Konwinski, Andy &amp;amp; Lee, Gunho &amp;amp; Patterson, David &amp;amp; Rabkin, Ariel &amp;amp; Stoica, Ion &amp;amp; Zaharia, Matei. (2010). A View of Cloud Computing. Commun. ACM. 53. 50-58. 10.1145/1721654.1721672. &lt;/a>&lt;/li>
&lt;li>&lt;a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.133.4969&amp;amp;rep=rep1&amp;amp;type=pdf">Attiya, H., &amp;amp; Welch, J. L. (1994). Sequential consistency versus linearizability. ACM Transactions on Computer Systems (TOCS), 12(2), 91-122.&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://db.cs.berkeley.edu/cs286/papers/dangers-sigmod1996.pdf">Gray, J., Helland, P., O&amp;rsquo;Neil, P., &amp;amp; Shasha, D. (1996). The dangers of replication and a solution. ACM SIGMOD Record, 25(2), 173-182.&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://blough.ece.gatech.edu/8813/schneider_state_machine.pdf">Schneider, F. B. (1990). Implementing fault-tolerant services using the state machine approach: A tutorial. ACM Computing Surveys (CSUR), 22(4), 299-319.&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>And I still need to get familiar with LaTeX&lt;/p></content></item><item><title>Slides</title><link>http://mateimicu.com/slides/</link><pubDate>Sat, 28 Apr 2018 00:15:43 +0300</pubDate><author>Matei-Marius Micu</author><guid>http://mateimicu.com/slides/</guid><description/><content>&lt;p>List with various slides and presentations.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://openstack-slides.mateimicu.com">OpenStack&lt;/a> introduction and how the projects and components are structured. At the end present how we integrated with it in the &lt;a href="https://github.com/cloudbase/cloudbase-init-ci">Argus&lt;/a> project tot test &lt;a href="https://github.com/openstack/cloudbase-init">CloudBase-Init&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://k8s-volumes-secrets-deployments.mateimicu.com/">Kubernets Deployments, Volumes, Secrets, ConfigMaps&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://conu.mateimicu.com/">Conu explained&lt;/a> slides and examples on how to test docker images using &lt;a href="https://github.com/user-cont/conu">Conu&lt;/a>&lt;/li>
&lt;/ul></content></item><item><title>Create Virtualbox Networks</title><link>http://mateimicu.com/create-virtualbox-networks/</link><pubDate>Sat, 21 Apr 2018 16:34:20 +0300</pubDate><author>Matei-Marius Micu</author><guid>http://mateimicu.com/create-virtualbox-networks/</guid><description/><content>&lt;p>How to create more Networks in Virtualbox.&lt;/p>
&lt;p>Go to :
&lt;strong>File -&amp;gt; Preferences&amp;hellip; -&amp;gt; Network&lt;/strong>
&lt;img src="http://mateimicu.com/img//create-virtualbox-networks/01-preferences.png" alt="Preferences in VirtualBox">&lt;/p>
&lt;p>You will find two tabs:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>NAT Networks&lt;/code>&lt;/p>
&lt;p>&lt;img src="http://mateimicu.com/img//create-virtualbox-networks/02-nat-tab.png" alt="NAT networks settings VirtualBox">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Host-only Networks&lt;/code>&lt;/p>
&lt;p>&lt;img src="http://mateimicu.com/img//create-virtualbox-networks/03-host-only-tab.png" alt="Host-Only networks settings VirtualBox">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>You can use the &lt;strong>+&lt;/strong> button to add more networks or the &lt;strong>Edit&lt;/strong> button to find out informations like:&lt;/p>
&lt;ul>
&lt;li>IP Addresses&lt;/li>
&lt;li>Network Masks&lt;/li>
&lt;li>If DHCP is enabled&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="http://mateimicu.com/img//create-virtualbox-networks/04-network-details.png" alt="Network Details for VirtualBox">&lt;/p></content></item><item><title>Install Openstack RDO</title><link>http://mateimicu.com/install-openstack-rdo/</link><pubDate>Sat, 21 Apr 2018 15:32:13 +0300</pubDate><author>Matei-Marius Micu</author><guid>http://mateimicu.com/install-openstack-rdo/</guid><description/><content>&lt;p>Install &lt;a href="1">RedHat Deployment of OpenStack&lt;/a> using &lt;a href="2">Packstack&lt;/a>.&lt;/p>
&lt;p>&lt;strong>Packstack&lt;/strong> is a wrapper over a collection of Puppet manifests that install a specific &lt;a href="3">release of OpenStack&lt;/a>&lt;/p>
&lt;h2 id="prerequisites">Prerequisite&amp;rsquo;s&lt;/h2>
&lt;p>A virtual Machine with &lt;a href="4">CentOS 7 Minimal&lt;/a> with the following configurations:&lt;/p>
&lt;ul>
&lt;li>at least one NAT network&lt;/li>
&lt;li>at least one Host-Only network&lt;/li>
&lt;li>8GB+ RAM&lt;/li>
&lt;li>50GB+ disk space&lt;/li>
&lt;li>enable nested paging&lt;/li>
&lt;li>enable VT-x/AMD-v&lt;/li>
&lt;/ul>
&lt;p>You can follow &lt;a href="5">this&lt;/a> article to prepare it.&lt;/p>
&lt;p>To enable support for vitalization (nested paging and VT-x/AMD-v) you can go to:
&lt;strong>Settings -&amp;gt; System -&amp;gt; Acceleration&lt;/strong>
&lt;img src="http://mateimicu.com/img/install-openstack-rdo/01-virtualbox-enable-acceleration.png" alt="Enable Virtualization Support VirtualBox">&lt;/p>
&lt;h2 id="conventions">Conventions&lt;/h2>
&lt;p>When you have successfully booted the VM you should have at least two network interfaces:&lt;/p>
&lt;ul>
&lt;li>&lt;code>enp0s3&lt;/code> corresponding with the NAT network&lt;/li>
&lt;li>&lt;code>enp0s8&lt;/code> corresponding with the Host-Only network&lt;/li>
&lt;/ul>
&lt;p>We will use the NAT network for internet access to our VM and also internet access for OpenStack networking.
The Host-Only network will be used to connect to the VM.&lt;/p>
&lt;p>Furthermore, I&amp;rsquo;ll assume the following conventions:&lt;/p>
&lt;ul>
&lt;li>&lt;code>enp0s3&lt;/code> has the CIDR &lt;code>10.0.2.0/24&lt;/code> and the DHCP assigned IP was &lt;code>10.0.2.25&lt;/code>&lt;/li>
&lt;li>&lt;code>enp0s8&lt;/code> has the CIRD &lt;code>192.168.99.0/24&lt;/code> and the DHCP assigned IP is &lt;code>192.168.99.25&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="install-packstack-and-prepare-the-system">Install Packstack and prepare the system&lt;/h2>
&lt;p>This process follows the steps form the (RDO website)&lt;a href="https://www.rdoproject.org/install/packstack/">6&lt;/a>.&lt;/p>
&lt;h3 id="setup-networking">Setup Networking&lt;/h3>
&lt;p>We need to disable the Network Manager from CentOS and configure a static IP for both interfaces&lt;/p>
&lt;h5 id="disable-network-manager">Disable Network Manager&lt;/h5>
&lt;p>Run the following commands&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">~ $ sudo systemctl disable firewalld
~ $ sudo systemctl stop firewalld
~ $ sudo systemctl disable NetworkManager
~ $ sudo systemctl stop NetworkManager
~ $ sudo systemctl enable network
~ $ sudo systemctl start network
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="setup-static-ip">Setup static IP&lt;/h5>
&lt;p>Because we disabled the Network Manager we can&amp;rsquo;t use (nmcli)&lt;a href="https://developer.gnome.org/NetworkManager/unstable/nmcli.html">7&lt;/a> to configure network interfaces.
We will have to rely on the classic network scrips found in &lt;code>/etc/sysconfig/network-scripts/&lt;/code>&lt;/p>
&lt;p>You can use &lt;code>vi&lt;/code> or &lt;code>nano&lt;/code> to edit the configurations.&lt;/p>
&lt;p>For the NAT network the configuration (found at &lt;code>/etc/sysconfig/network-scripts/ifcfg-enp0s3&lt;/code>) should look like this:&lt;/p>
&lt;pre>&lt;code>TYPE=Ethernet
PROXY_METHOD=none
BROWSER_ONLY=no
BOOTPROTO=static
DEFROUTE=yes
IPV4_FAILURE_FATAL=no
IPV6INIT=yes
IPV6_AUTOCONF=yes
IPV6_DEFROUTE=yes
IPV6_FAILURE_FATAL=no
IPV6_ADDR_GEN_MODE=stable-privacy
NAME=enp0s3
UUID=&amp;lt;uuid&amp;gt;
DEVICE=enp0s3
ONBOOT=yes
IPADDR=10.0.2.25
NETMASK=255.255.255.0
GATEWAY=10.0.2.2
DNS1=8.8.8.8
DNS2=8.8.4.4
&lt;/code>&lt;/pre>&lt;p>For a better understanding I&amp;rsquo;ll explain the required changes:&lt;/p>
&lt;p>&lt;code>BOOTPROTO=static&lt;/code> this was changed from DHCP, it means we want to set up a static IP not to
ask a DHCP service for one;&lt;/p>
&lt;p>&lt;code>ONBOOT=yes&lt;/code> this device will be activated at boot time;&lt;/p>
&lt;p>&lt;code>IPADDR=10.0.2.25&lt;/code> what IP address we want to use. &lt;strong>Notice&lt;/strong> this is in the same range
we assumed in the &lt;a href="#conventions">Convention&lt;/a> section.&lt;/p>
&lt;p>&lt;code>NETMASK=255.255.255.0&lt;/code> the netmask for our network. &lt;strong>Notice&lt;/strong> this is in the same &lt;code>/24&lt;/code>
we assumed in the &lt;a href="#conventions">Convention&lt;/a> section.&lt;/p>
&lt;p>&lt;code>GATEWAY=10.0.2.2&lt;/code> what gateway to use in our network, &lt;code>.2&lt;/code> is the default in VirtualBox.&lt;/p>
&lt;p>We configure the &lt;code>DNS&lt;/code> to use the ones provided by google.&lt;/p>
&lt;p>More information about the network scripts can be found on the &lt;a href="8">centos website&lt;/a>.&lt;/p>
&lt;hr>
&lt;p>For the Host-Only network the configuration (found at &lt;code>/etc/sysconfig/network-scripts/ifcfg-enp0s8&lt;/code>) should look like this:&lt;/p>
&lt;pre>&lt;code>TYPE=Ethernet
PROXY_METHOD=none
BROWSER_ONLY=no
BOOTPROTO=static
DEFROUTE=yes
IPV4_FAILURE_FATAL=no
IPV6INIT=yes
IPV6_AUTOCONF=yes
IPV6_DEFROUTE=yes
IPV6_FAILURE_FATAL=no
IPV6_ADDR_GEN_MODE=stable-privacy
NAME=enp0s9
UUID=&amp;lt;uuid&amp;gt;
DEVICE=enp0s9
PREFIX=24
ONBOOT=yes
IPADDR=192.168.99.25
NETMASK=255.255.255.0
GATEWAY=192.168.99.2
&lt;/code>&lt;/pre>&lt;p>The same parameters as the NAT network were configured. We only omitted the &lt;code>DNS&lt;/code>, this network has no Internet Connectivity
and DNS settings are not required.&lt;/p>
&lt;p>To find more about networking in VirtualBox you can read &lt;a href="http://mateimicu.com/posts/create-virtualbox-networks">this&lt;/a> article.&lt;/p>
&lt;p>Now you need to apply the configurations to both interfaces:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">~ $ sudo ifdown enp0s3
~ $ sudo ifdown enp0s8
~ $ sudo ifup enp0s3
~ $ sudo ifup enp0s8
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now you should be able to connect to the instance&lt;/p>
&lt;h3 id="setup-ssh">Setup SSH&lt;/h3>
&lt;p>You need to install the SSH server&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">~ $ sudo yum install -y vim openssh-server
~ $ sudo systemctl start sshd
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now you should be able to connect with ssh to that instance.&lt;/p>
&lt;p>From the Host machine (your laptop) try to connect with ssh to that instance:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">~ $ ssh root@192.168.99.25
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This ssh connection is more convenient to work.&lt;/p>
&lt;h3 id="install-packstack">Install Packstack&lt;/h3>
&lt;p>Install the &lt;a href="3">OpenStack realizes&lt;/a> you want and the packstack utility&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">~ $ sudo yum install -y centos-release-openstack-pike
~ $ sudo yum update -y
~ $ sudo yum install -y openstack-packstack
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can use any &lt;a href="3">OpenStack realizes&lt;/a>, I tested this with Newton(that is deprecated) and Pike.&lt;/p>
&lt;h3 id="install-openstack">Install Openstack&lt;/h3>
&lt;h4 id="simple-all-in-one-deployment">Simple All In One deployment&lt;/h4>
&lt;p>Now we provision the OpenStack cluster using Packstack on this instance with default services and configurations.&lt;/p>
&lt;pre>&lt;code>~ $ packstack --allinone --ntp-servers=pool.ntp.org
&lt;/code>&lt;/pre>&lt;h4 id="using-an-answer-file">Using an answer file&lt;/h4>
&lt;p>You can generate an answer file with the following command:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">~ $ packstack --gen-answer-file&lt;span style="color:#f92672">=&lt;/span>~/answers-file.txt
&lt;/code>&lt;/pre>&lt;/div>&lt;p>If we look at this file we can see all the configuration used by the Packstack utility.
Some configuration that might be helpful for a simple deployment might be:&lt;/p>
&lt;pre>&lt;code>CONFIG_SWIFT_INSTALL=n
CONFIG_CEILOMETER_INSTALL=n
CONFIG_AODH_INSTALL=n
CONFIG_GNOCCHI_INSTALL=n
CONFIG_HEAT_INSTALL=y
CONFIG_NTP_SERVERS=pool.ntp.org
CONFIG_NAGIOS_INSTALL=n
CONFIG_DEBUG_MODE=y
&lt;/code>&lt;/pre>&lt;p>Run the utility with this settings&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">~ $ packstack --answer-file&lt;span style="color:#f92672">==&lt;/span>~/answers-file.txt
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="access-horizon">Access Horizon&lt;/h3>
&lt;p>To access the OpenStack deployment you first need to allow access to &lt;code>httpd&lt;/code> from the private ip.&lt;/p>
&lt;p>Edit the file &lt;code>/etc/httpd/conf.d/15-horizon_vhost.conf&lt;/code> and replace all occurrence&amp;rsquo;s of &lt;code>ServerAlias&lt;/code> with just one &lt;code>ServerAlias *&lt;/code>.
It should look like this (this is just the snipper)&lt;/p>
&lt;pre>&lt;code>...
## Server aliases
ServerAlias *
WSGIApplicationGroup %{GLOBAL}
WSGIDaemonProcess apache group=apache processes=3 threads=10 user=apache
...
&lt;/code>&lt;/pre>&lt;p>You can now access the dashboard using the private ip (in our example &lt;code>192.168.99.25&lt;/code>).
The credential can be found in one of the files &lt;code>keystonerc_admin&lt;/code> or &lt;code>keystonerc_admin&lt;/code>.&lt;/p>
&lt;h3 id="troubleshooting">Troubleshooting&lt;/h3>
&lt;p>When the packer utility finishes, it will give you information about the status of the deployment and the location of the logs.
It might look something like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">ERROR : Error appeared during Puppet run: 10.0.2.30_controller.pp
Error: Execution of &lt;span style="color:#e6db74">&amp;#39;/usr/bin/rpm -e mariadb-server-10.1.20-1.el7.x86_64&amp;#39;&lt;/span> returned 1: error: Failed dependencies:
You will find full trace in log /var/tmp/packstack/20180422-164044-c2KzyF/manifests/10.0.2.30_controller.pp.log
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can usually fix the problem by installing/removing some package that has a problem or change some configuration in your
answer file. After you fixed the problem you can run the &lt;code>packstack&lt;/code> command with the &lt;code>--answer-file&lt;/code> parameter to install Openstack.&lt;/p>
&lt;p>You can also run &lt;code>packstack&lt;/code> in debug mode with the flag &lt;code>--debug&lt;/code>.&lt;/p>
&lt;p>You can list all the Openstack services with the following command:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">~ $ systemctl list-units openstack-*
&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>Install Openstack Labs</title><link>http://mateimicu.com/install-openstack-labs/</link><pubDate>Sat, 14 Apr 2018 00:55:44 +0300</pubDate><author>Matei-Marius Micu</author><guid>http://mateimicu.com/install-openstack-labs/</guid><description/><content>&lt;p>Openstack Training Labs is a python project that installs a new OpenStack cluster in two virtual machines.
It is an easy way to provision a working deployment for testing/development purposes.&lt;/p>
&lt;p>It works like docker-machine or boot2docker:&lt;/p>
&lt;ul>
&lt;li>spawn two VM&amp;rsquo;s using a guest Hyper-visor (supports VirtualBox and KVM)&lt;/li>
&lt;li>copy bash scripts in the machine and run it (this will install the OpenStack Components)&lt;/li>
&lt;li>port-forward some services from the NAT provided by the Hyper-visor to the guest machine&lt;/li>
&lt;/ul>
&lt;p>All the documentation can be found &lt;a href="1">here&lt;/a>, it goes in greater details about the setup.&lt;/p>
&lt;h2 id="step-by-step-guide">Step by Step Guide&lt;/h2>
&lt;p>Following the provided documentation on a&lt;/p>
&lt;h5 id="install-dependency">Install dependency&lt;/h5>
&lt;p>To use this project we need to have a few dependencies satisfied:&lt;/p>
&lt;p>&lt;strong>VirtualBox&lt;/strong>&lt;/p>
&lt;p>This will install the VirtualBox utility and a graphical Interface that we can use&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">~ $ sudo apt-get install virtualbox virtualbox-qt
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Git&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">~ $ sudo apt-get git
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Python&lt;/strong>
This is usually already installed in most distributions.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">~ $ sudo apt-get install python2.7
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="clone-the-project">Clone the project&lt;/h5>
&lt;p>The project is hosted on &lt;a href="2">Gerrit&lt;/a> but all the OpenStack project have mirrors on &lt;a href="3">GitHub&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">~ $ git clone https://github.com/openstack/training-labs.git
~ $ cd training-labs/labs
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We need to use the latest release of OpenStack.(You can check the OpenStack releases &lt;a href="https://releases.openstack.org/">here&lt;/a>)&lt;/p>
&lt;pre>&lt;code>~ $ git checkout stable/queens
&lt;/code>&lt;/pre>&lt;h5 id="start-the-cluster">Start the cluster&lt;/h5>
&lt;p>We should have a tree structure like this&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">~ $ ls
autostart config lib log osbash scripts stacktrain st.py tests tools wbatch
&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can run the provisioning with the following command&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">~ $ ./st.py --verbose --gui gui --provider virtualbox --build cluster
&lt;/code>&lt;/pre>&lt;/div>&lt;p>This process may take some time depending on your hardware and network speed.&lt;/p></content></item><item><title>Docker Dynamic Commands</title><link>http://mateimicu.com/docker-dynamic-commands/</link><pubDate>Mon, 04 Dec 2017 19:51:58 +0200</pubDate><author>Matei-Marius Micu</author><guid>http://mateimicu.com/docker-dynamic-commands/</guid><description/><content>&lt;p>When learning docker an interesting question you may have is: &lt;strong>What happens with commands that install software when rebuilding an image&lt;/strong>.&lt;/p>
&lt;p>Let&amp;rsquo;s give a scenario:&lt;/p>
&lt;p>You create a simple docker file like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">FROM python:2.7-slim
&lt;span style="color:#75715e"># Update the system&lt;/span>
RUN apt-get update -y &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> apt-get upgrade -y
&lt;span style="color:#75715e"># add some source files&lt;/span>
ADD . /app
&lt;span style="color:#75715e"># expose a port&lt;/span>
EXPOSE &lt;span style="color:#ae81ff">80&lt;/span>
&lt;span style="color:#75715e"># Run app.py when the container launches&lt;/span>
CMD &lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#e6db74">&amp;#34;python&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;app.py&amp;#34;&lt;/span>&lt;span style="color:#f92672">]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>this is not a complete &lt;code>Dockerfile&lt;/code>, just the snippets we are interested in.
If we try to build this an image based on this file, we get something like this:&lt;/p>
&lt;pre>&lt;code>Step 1/5 : FROM python:2.7-slim
...
Step 2/5 : RUN apt-get update -y &amp;amp;&amp;amp; apt-get upgrade -y
...
Step 3/5 : ADD . /app
...
Step 4/5 : EXPOSE 80
...
Step 5/5 : CMD [&amp;quot;python&amp;quot;, &amp;quot;app.py&amp;quot;]
...
Successfully built 3609163bdce5
&lt;/code>&lt;/pre>&lt;p>(the output is truncated to save space).
The important step is &lt;code>2&lt;/code> where we update the system. We can see that this will download and install new versions for the libraries that we have on the system.&lt;/p>
&lt;p>This can pose a problem because we may rely on a specific version of the library. In other words, next time we build the image (imagine we updated the codebase and need to create a new image
to deploy) the &lt;code>apt-get update -y &amp;amp;&amp;amp; apt-get upgrade -y&lt;/code> run and ruin the image (our application not handling the new libraries).&lt;/p>
&lt;h3 id="unionfs-to-the-rescue">UnionFS to the rescue&lt;/h3>
&lt;p>One thing to keep in mind is the way images are built/stored/transferred using a Union file system that works with layers. If I a layer is already found it will not be &amp;ldquo;compiled&amp;rdquo; again, this means that if we add a new file to our directory &lt;code>echo &amp;quot;new dummy file&amp;quot; &amp;gt;&amp;gt; dummy&lt;/code> and our current directory will look like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">~ $ ls
Dockerfile dummy
&lt;/code>&lt;/pre>&lt;/div>&lt;p>When running a new build:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">~ $ docker build .
Sending build context to Docker daemon 3.072kB
Step 1/5 : FROM python:2.7-slim
---&amp;gt; b0259cf63993
Step 2/5 : RUN apt-get update -y &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> apt-get upgrade -y
---&amp;gt; Using cache
---&amp;gt; 00414512ae60
Step 3/5 : ADD . /app
---&amp;gt; 7c8266369b33
Step 4/5 : EXPOSE &lt;span style="color:#ae81ff">80&lt;/span>
---&amp;gt; Running in 6bc4c5a16d2f
Removing intermediate container 6bc4c5a16d2f
---&amp;gt; ae8b02e34ced
Step 5/5 : CMD &lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#e6db74">&amp;#34;python&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;app.py&amp;#34;&lt;/span>&lt;span style="color:#f92672">]&lt;/span>
---&amp;gt; Running in a78e73b6e1b9
Removing intermediate container a78e73b6e1b9
---&amp;gt; 96dd2f890cbf
Successfully built 96dd2f890cbf
&lt;/code>&lt;/pre>&lt;/div>&lt;p>we can see that the step &lt;code>2&lt;/code> was skipped and the cached version for that layer (that runs &lt;code>RUN apt-get update -y &amp;amp;&amp;amp; apt-get upgrade -y&lt;/code>) was used.
This is an important distinction to make if we build this image on the same machine (environment) where it was previously built the &lt;code>RUN&lt;/code> command will not be executed.&lt;/p>
&lt;p>This helps us maintain the same OS-lvl libraries and binaries when we build images but open a new problem: &lt;strong>security&lt;/strong>.&lt;/p>
&lt;p>One reason why you may want to update the libraries is to make sure you have the latest security patches.
The build command helpfully allows us to disable the cache with the &lt;code>--no-cache&lt;/code> command. Running the build in this way we can see that the updates are running.&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">docker build . --no-cache
Sending build context to Docker daemon 3.072kB
Step 1/5 : FROM python:2.7-slim
---&amp;gt; b0259cf63993
Step 2/5 : RUN apt-get update -y &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> apt-get upgrade -y
---&amp;gt; Running in cce3fb472a18
Get:1 http://security.debian.org jessie/updates InRelease &lt;span style="color:#f92672">[&lt;/span>63.1 kB&lt;span style="color:#f92672">]&lt;/span>
Get:2 http://security.debian.org jessie/updates/main amd64 Packages &lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">588&lt;/span> kB&lt;span style="color:#f92672">]&lt;/span>
...
...
---&amp;gt; 1dc0f9d842b1
Step 3/5 : ADD . /app
---&amp;gt; 597a83647250
Step 4/5 : EXPOSE &lt;span style="color:#ae81ff">80&lt;/span>
---&amp;gt; Running in 4e0da110e6f4
Removing intermediate container 4e0da110e6f4
---&amp;gt; 8159270ed233
Step 5/5 : CMD &lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#e6db74">&amp;#34;python&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;app.py&amp;#34;&lt;/span>&lt;span style="color:#f92672">]&lt;/span>
---&amp;gt; Running in 8c3928f25d7a
Removing intermediate container 8c3928f25d7a
---&amp;gt; 4eb0161a51ab
Successfully built 4eb0161a51ab
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Another problem with updating images is the amount of unnecessary updated it will bring, a docker image should be light and only contain the &lt;strong>required&lt;/strong> dependencies.
Thankfully most containers don&amp;rsquo;t and &lt;strong>shouldn&amp;rsquo;t&lt;/strong> be exposed to the internet. This minimizes the attack vectors a bad actor can use.&lt;/p>
&lt;h3 id="caching">Caching&lt;/h3>
&lt;p>Another problem with &lt;code>apt-get&lt;/code> in a container is the caching problem. You can&amp;rsquo;t have a docker file that looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">RUN apt-get update -y
RUN apt-get upgrade -y
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The first command will use a cache that is not shared with the second command; this is a good reason why you should chain them using bash &lt;code>&amp;amp;&amp;amp;&lt;/code>.&lt;/p></content></item></channel></rss>